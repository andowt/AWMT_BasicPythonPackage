name: Build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
    store:
      description: 'Store build artifacts'
      required: true
      default: 'false'
      type: choice
      options:
        - true
        - false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine if store should be true (based on source branch)
        id: store_condition
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.ref }}" == "release" ]]; then
            echo "STORE=true" >> $GITHUB_ENV  # Set store to true if the source branch is release
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.store }}" == "true" ]]; then
            echo "STORE=true" >> $GITHUB_ENV  # Use the manually triggered input value
          else
            echo "STORE=false" >> $GITHUB_ENV  # Otherwise, set store to false
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # You can change the version as needed

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies using Poetry
        run: |
          poetry install  --with dev

      - name: Build the package and capture output
        run: |
          # Run poetry build and capture the output into a log file
          poetry build > build_output.log 2>&1
          build_exit_code=$?
          echo "BUILD_EXIT_CODE=$build_exit_code" >> $GITHUB_ENV
          echo "Poetry build completed. Log saved to build_output.log"
        continue-on-error: true

      - name: Store the build artifacts in GitHub Releases
        if: ${{ env.STORE == 'true' && env.BUILD_EXIT_CODE == 0 }}
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          RELEASE_TAG="pr-${{ github.event.pull_request.number }}"
          if gh release view "$RELEASE_TAG" > /dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists. Updating..."
            gh release upload "$RELEASE_TAG" dist/* --clobber
          else
            echo "Creating new release $RELEASE_TAG..."
            gh release create "$RELEASE_TAG" dist/* --notes "Build artifacts for PR #${{ github.event.pull_request.number }}" --title "$RELEASE_TAG"
          fi

      - name: Store build log on fail
        if: ${{ env.STORE == 'true' || env.BUILD_EXIT_CODE != 0 }}  # Check if the build failed
        uses: actions/upload-artifact@v4
        with:
          name: poetry-build-log-PR${{ github.event.pull_request.number }}
          path: build_output.log  # Upload the log file only if the build failed

      - name: Force workflow failure on build failure
        if: ${{ env.BUILD_EXIT_CODE != 0 }}  # Check if the build failed
        run: |
          echo "Build failed with exit code ${{ env.BUILD_EXIT_CODE }}. Exiting with error."
          exit 1  # Force the workflow to fail

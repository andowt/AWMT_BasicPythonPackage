name: Deploy Release

on:
  pull_request:
    types: [closed]  # Trigger when the PR is closed (merged or closed without merging)
    branches:
      - main
    # Make sure the source branch is 'release'
    if: github.event.pull_request.head.ref == 'release'

permissions:
  contents: read
  packages: write

jobs:
  deploy-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download build artifacts from GitHub Release
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          RELEASE_TAG="pr-${{ github.event.pull_request.number }}"
          gh release edit "$RELEASE_TAG" --draft=false # Need to make the release non draft to download it
          gh release download "$RELEASE_TAG" --pattern "dist/*" --dir dist/

      #- name: Install PIP Requirements
      #  run: |
      #    pip install twine

      #- name: Publish to PyPI
      #  run: |
      #    twine upload dist/* -u __token__ -p ${{ secrets.PYPI_API_TOKEN }}

      - name: Rename and Publish the Draft Release
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          RELEASE_TAG="pr-${{ github.event.pull_request.number }}"
          NEW_TAG="v${{ env.VERSION }}"
          # Update the release title, tag, and make it public
          gh release edit "$RELEASE_TAG" \
            --target main \
            --title "Release $NEW_TAG" \
            --tag "$NEW_TAG" \
            --draft=false

      - name: Get Version
        run: |
          # Capture the bumped version from .bumpversion.cfg
          bumped_version=$(grep -oP '(?<=current_version = ).*' .bumpversion.cfg)
          echo "Bumped version is: $bumped_version"
          echo "VERSION=$bumped_version" >> $GITHUB_ENV  # Set the version as an environment variable

      - name: Tag release in main
        run: |
          # Create a new Git tag based on the version
          git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"  
          # Push the tag to the remote repository
          git push origin "v${{ env.VERSION }}"
